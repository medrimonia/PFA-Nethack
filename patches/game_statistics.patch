diff --git p2/a/nethack-3.4.3/include/game_statistics.h p2/b/nethack-3.4.3/include/game_statistics.h
new file mode 100644
index 0000000..36921bf
--- /dev/null
+++ p2/b/nethack-3.4.3/include/game_statistics.h
@@ -0,0 +1,58 @@
+#ifndef GAME_STATISTICS_H
+#define GAME_STATISTICS_H
+
+/* Add a door to the number of secret doors that can be found. This function
+ * must be called for the doors which haven't been added in an update_nb_sdoor()
+ */
+void statistic_add_sdoor();
+
+/* Shall be called once by secret door discovery */
+void statistic_add_sdoor_discovery();
+
+/* Add a door to the number of secret corridors that can be found. This function
+ * must be called for the secret corridors which haven't been added in an
+ * update_nb_sdoor()
+ */
+void statistic_add_scorr();
+
+/* Shall be called once by secret corridor discovery */
+void statistic_add_scorr_discovery();
+
+/* Must be called each time a new level is reached, but not twice for the same
+ * level. */
+void update_nb_sdoors();
+
+/* Must be called each time a new level is reached, but not twice for the same
+ * level. */
+void update_nb_scorrs();
+
+/* Must be called each time a new level is reached, but not twice for the same
+ * level. */
+void update_reachable_squares();
+
+/* Must be called at least once each time a new square is reached (might be
+ * called more than once on the same square)
+ */
+void update_reached_squares();
+
+/* Return the number of secret doors reachable in all the level reached. */
+int get_nb_sdoors();
+
+/* Return the number of secret doors found during the game. */
+int get_nb_sdoors_found();
+
+/* Return the number of secret corridors reachable in all the level reached.
+ */
+int get_nb_scorrs();
+
+/* Return the number of secret corridors found during the game. */
+int get_nb_scorrs_found();
+
+/* Return the number of squares reachable in all the level reached. */
+int get_nb_squares_reachable();
+
+/* Return the number of square reached during the game. */
+int get_nb_squares_reached();
+
+
+#endif
diff --git p2/a/nethack-3.4.3/src/Makefile p2/b/nethack-3.4.3/src/Makefile
index bd77fab..2b6a300 100644
--- p2/a/nethack-3.4.3/src/Makefile
+++ p2/b/nethack-3.4.3/src/Makefile
@@ -328,6 +328,8 @@ HACKCSRC = allmain.c alloc.c apply.c artifact.c attrib.c ball.c bones.c \
 	   u_init.c uhitm.c vault.c version.c vision.c weapon.c were.c wield.c \
 	   windows.c wizard.c worm.c worn.c write.c zap.c
 
+HACKCSRC += game_statistics.c
+
 # all operating-system-dependent .c (for dependencies and such)
 SYSCSRC = ../sys/atari/tos.c ../sys/share/pcmain.c ../sys/share/pcsys.c \
 	../sys/share/pctty.c ../sys/share/pcunix.c ../sys/share/random.c \
@@ -387,6 +389,8 @@ HOBJ = $(FIRSTOBJ) allmain.o alloc.o apply.o artifact.o attrib.o ball.o \
 	$(RANDOBJ) $(SYSOBJ) $(WINOBJ) version.o
 # the .o files from the HACKCSRC, SYSSRC, and WINSRC lists
 
+HOBJ += game_statistics.o
+
 $(GAME):	$(SYSTEM)
 	@echo "$(GAME) is up to date."
 
@@ -568,7 +572,8 @@ $(HACK_H): ../include/hack.h $(CONFIG_H) ../include/align.h \
 		../include/trap.h ../include/flag.h ../include/rm.h \
 		../include/vision.h ../include/display.h ../include/engrave.h \
 		../include/rect.h ../include/region.h ../include/winprocs.h \
-		../include/wintty.h ../include/trampoli.h
+		../include/wintty.h ../include/trampoli.h \
+		../include/game_statistics.h
 	touch $(HACK_H)
 #
 tos.o: ../sys/atari/tos.c $(HACK_H) ../include/tcap.h
diff --git p2/a/nethack-3.4.3/src/allmain.c p2/b/nethack-3.4.3/src/allmain.c
index d624a2f..8955b71 100644
--- p2/a/nethack-3.4.3/src/allmain.c
+++ p2/b/nethack-3.4.3/src/allmain.c
@@ -6,6 +6,8 @@
 
 #include "hack.h"
 
+#include "game_statistics.h"
+
 #ifndef NO_SIGNAL
 #include <signal.h>
 #endif
@@ -50,6 +52,10 @@ moveloop()
     monstr_init();	/* monster strengths */
     objects_init();
 
+    update_nb_sdoors();
+    update_nb_scorrs();
+    update_reachable_squares();
+
 #ifdef WIZARD
     if (wizard) add_debug_extended_commands();
 #endif
@@ -60,6 +66,9 @@ moveloop()
     youmonst.movement = NORMAL_SPEED;	/* give the hero some movement points */
 
     for(;;) {
+
+	update_reached_squares();
+
 	get_nh_event();
 #ifdef POSITIONBAR
 	do_positionbar();
diff --git p2/a/nethack-3.4.3/src/detect.c p2/b/nethack-3.4.3/src/detect.c
index 5da025f..0cae139 100644
--- p2/a/nethack-3.4.3/src/detect.c
+++ p2/b/nethack-3.4.3/src/detect.c
@@ -921,6 +921,9 @@ register int x, y;
     /* Secret corridors are found, but not secret doors. */
     if (lev->typ == SCORR) {
 	lev->typ = CORR;
+
+	statistic_add_scorr_discovery();
+
 	unblock_point(x,y);
     }
 
@@ -993,6 +996,8 @@ struct rm *lev;
 	    /* newly exposed door is closed */
 	    if (!(newmask & D_LOCKED)) newmask |= D_CLOSED;
 
+	statistic_add_sdoor_discovery();
+
 	lev->typ = DOOR;
 	lev->doormask = newmask;
 }
@@ -1012,6 +1017,9 @@ genericptr_t num;
 		newsym(zx, zy);
 		(*(int*)num)++;
 	} else if(levl[zx][zy].typ == SCORR) {
+		
+		statistic_add_scorr_discovery();
+		
 		levl[zx][zy].typ = CORR;
 		unblock_point(zx,zy);
 		magic_map_background(zx, zy, 0);
@@ -1080,6 +1088,9 @@ genericptr_t num;
 		newsym(zx, zy);
 		(*(int*)num)++;
 	} else if(levl[zx][zy].typ == SCORR) {
+
+		statistic_add_scorr_discovery();
+
 		levl[zx][zy].typ = CORR;
 		unblock_point(zx, zy);
 		newsym(zx, zy);
@@ -1198,6 +1209,9 @@ register int aflag;
 			    newsym(x,y);
 		    } else if(levl[x][y].typ == SCORR) {
 			if(rnl(7-fund)) continue;
+
+			statistic_add_scorr_discovery();
+
 			levl[x][y].typ = CORR;
 			unblock_point(x,y);	/* vision */
 			exercise(A_WIS, TRUE);
diff --git p2/a/nethack-3.4.3/src/do.c p2/b/nethack-3.4.3/src/do.c
index 858777f..67a9ea4 100644
--- p2/a/nethack-3.4.3/src/do.c
+++ p2/b/nethack-3.4.3/src/do.c
@@ -7,6 +7,8 @@
 #include "hack.h"
 #include "lev.h"
 
+#include "game_statistics.h"
+
 #ifdef SINKS
 # ifdef OVLB
 STATIC_DCL void FDECL(trycall, (struct obj *));
@@ -1097,6 +1099,11 @@ boolean at_stairs, falling, portal;
 		}
 		mklev();
 		new = TRUE;	/* made the level */
+
+		update_nb_sdoors();
+		update_nb_scorrs();
+		update_reachable_squares();
+
 	} else {
 		/* returning to previously visited level; reload it */
 		fd = open_levelfile(new_ledger, whynot);
diff --git p2/a/nethack-3.4.3/src/end.c p2/b/nethack-3.4.3/src/end.c
index 58d47e0..d888edc 100644
--- p2/a/nethack-3.4.3/src/end.c
+++ p2/b/nethack-3.4.3/src/end.c
@@ -11,6 +11,8 @@
 #endif
 #include "dlb.h"
 
+#include "game_statistics.h"
+
 	/* these probably ought to be generated by makedefs, like LAST_GEM */
 #define FIRST_GEM    DILITHIUM_CRYSTAL
 #define FIRST_AMULET AMULET_OF_ESP
@@ -886,6 +888,22 @@ die:
 		    umoney, plur(umoney), moves, plur(moves));
 	    putstr(endwin, 0, pbuf);
 	}
+	if (!done_stopprint) {//game_statistics output
+	    putstr(endwin, 0, "");
+	    Sprintf(pbuf,
+	     "You found %d secrets doors, there was %d secret doors.",
+		    get_nb_sdoors_found(), get_nb_sdoors());
+	    putstr(endwin, 0, pbuf);
+	    Sprintf(pbuf,
+	     "You found %d secrets corridors, there was %d secret corridors.",
+		    get_nb_scorrs_found(), get_nb_scorrs());
+	    putstr(endwin, 0, pbuf);
+	    Sprintf(pbuf,
+	     "You walked on %d squares, there was %d walkable squares.",
+		    get_nb_squares_reached(), get_nb_squares_reachable());
+	    putstr(endwin, 0, pbuf);
+	    putstr(endwin, 0, "");
+	}
 	if (!done_stopprint) {
 	    Sprintf(pbuf,
 	     "You were level %d with a maximum of %d hit point%s when you %s.",
diff --git p2/a/nethack-3.4.3/src/game_statistics.c p2/b/nethack-3.4.3/src/game_statistics.c
new file mode 100644
index 0000000..fa1c27b
--- /dev/null
+++ p2/b/nethack-3.4.3/src/game_statistics.c
@@ -0,0 +1,96 @@
+#include "game_statistics.h"
+
+#include "hack.h"
+
+int nb_sdoors = 0;
+int nb_sdoors_found = 0;
+
+int nb_scorrs = 0;
+int nb_scorrs_found = 0;
+
+int nb_squares_reached = 0;
+int nb_squares_reachable = 0;
+
+static char visited_square [MAXDUNGEON][MAXLEVEL][COLNO][ROWNO];
+
+void statistic_add_sdoor(){
+	nb_sdoors++;
+}
+
+void statistic_add_scorr(){
+	nb_scorrs++;
+}
+
+void statistic_add_sdoor_discovery(){
+	nb_sdoors_found++;
+}
+
+void statistic_add_scorr_discovery(){
+	nb_scorrs_found++;
+}
+
+void update_nb_sdoors() {
+	int col;
+	int row;
+	for (col = 0; col < COLNO; col++){
+	  for (row = 0; row < ROWNO; row++){
+	  if (levl[col][row].typ == SDOOR)
+	    nb_sdoors++;
+	  }
+	}
+}
+
+void update_nb_scorrs() {
+	int col;
+	int row;
+	for (col = 0; col < COLNO; col++){
+	  for (row = 0; row < ROWNO; row++){
+	  if (levl[col][row].typ == SCORR)
+	    nb_scorrs++;
+	  }
+	}
+}
+
+void update_reachable_squares(){
+	int c;
+	int r;
+	for (c = 0; c < COLNO ; c++){
+		for (r = 0; r < ROWNO ; r++){
+			if (levl[c][r].typ > 12) // see rm.h:33
+				nb_squares_reachable++;
+		}
+	}
+}
+
+void update_reached_squares(){
+	if (!visited_square[u.uz.dnum][u.uz.dlevel][u.ux][u.uy]){
+		visited_square[u.uz.dnum][u.uz.dlevel][u.ux][u.uy] = 1;
+		nb_squares_reached++;
+	}
+
+
+}
+
+int get_nb_sdoors() {
+	return nb_sdoors;
+}
+
+int get_nb_sdoors_found(){
+	return nb_sdoors_found;
+}
+
+int get_nb_scorrs() {
+	return nb_scorrs;
+}
+
+int get_nb_scorrs_found(){
+	return nb_scorrs_found;
+}
+
+int get_nb_squares_reachable(){
+	return nb_squares_reachable;
+}
+
+int get_nb_squares_reached(){
+	return nb_squares_reached;
+}
diff --git p2/a/nethack-3.4.3/src/sp_lev.c p2/b/nethack-3.4.3/src/sp_lev.c
index 435609f..78d6e97 100644
--- p2/a/nethack-3.4.3/src/sp_lev.c
+++ p2/b/nethack-3.4.3/src/sp_lev.c
@@ -11,6 +11,9 @@
 
 #include "hack.h"
 #include "dlb.h"
+
+#include "game_statistics.h"
+
 /* #define DEBUG */	/* uncomment to enable code debugging */
 
 #ifdef DEBUG
@@ -656,6 +659,9 @@ struct mkroom *broom;
 	}
 	add_door(x,y,broom);
 	levl[x][y].typ = (dd->secret ? SDOOR : DOOR);
+	
+	if (dd->secret)statistic_add_sdoor();
+	
 	levl[x][y].doormask = dd->mask;
 }
 
@@ -693,6 +699,9 @@ create_secret_door(croom, walls)
 	    levl[sx][sy].typ = SDOOR;
 	    levl[sx][sy].doormask = D_CLOSED;
 	    add_door(sx,sy,croom);
+
+	    statistic_add_sdoor();
+
 	    return;
 	}
     }
